import golosinas.*

describe "test de golosinaBaniada"{
	
	test "Precio de la golosina de base" {
		golosinaBaniada.baniaA(caramelo)
		assert.equals (3, golosinaBaniada.precio())
	}
	test "Me indica el peso total entre el la golosina base y el peso del bañado " {
		golosinaBaniada.baniaA(caramelo)
		assert.equals (9, golosinaBaniada.peso())
	}
	
	test "Le doy un mordisco a la golosina bañada de peso 9(golosinaInterior que es caramelo de peso 5 + el peso del baño que es 4) 
			y como el peso del baño es mayor a cero le resto 2 quedando 7" {
		golosinaBaniada.baniaA(caramelo)
		golosinaBaniada.mordisco()
		assert.equals(7, golosinaBaniada.peso())
		}
	test "Le doy dos mordisco a la golosina bañada de peso 7 y como el peso del baño(peso 2) es mayor a cero le resto 2 quedando 5 " {
		golosinaBaniada.baniaA(caramelo)
		golosinaBaniada.mordisco()
		golosinaBaniada.mordisco()
		assert.equals(5, golosinaBaniada.peso())
		}
	test "Le doy tres mordisco a la golosina bañada de peso 5 y como el peso del baño(peso 0) es igual a cero empiezo con la golosina interior quedando 4" {
        golosinaBaniada.baniaA(caramelo)   	
		golosinaBaniada.mordisco()
		golosinaBaniada.mordisco()
		golosinaBaniada.mordisco()
		assert.equals(4, golosinaBaniada.peso())
		}
		
		
	
	test "sabor de la golosina bañada depende de la golosina interior" {
		golosinaBaniada.baniaA(caramelo) 
		assert.equals("frutilla", golosinaBaniada.gusto())
	}
	
	test "compruebo que sea libre de gluten" {
		golosinaBaniada.baniaA(caramelo) 
		assert.that(golosinaBaniada.libreGluten())	
	}
	
}